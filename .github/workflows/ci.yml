name: Pipeline CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests
        run: |
          python manage.py test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    steps:
      - name: Test docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/the-button:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/the-button:latest

  deploy-to-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v3
      - name: Mock deployment to dev
        run: |
          echo "Mock deployment to dev (placeholder step)"
          sleep 2

  release:
    needs: deploy-to-dev
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.versioning.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Semantic versioning
        id: versioning
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: master
          default_bump: ${{ github.event.inputs.version_type || 'patch' }}

      - name: Create Release
        if: steps.versioning.outputs.new_tag
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.versioning.outputs.new_tag }}
          release_name: Release ${{ steps.versioning.outputs.new_tag }}
          body: ${{ steps.versioning.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Login to DockerHub
        if: steps.versioning.outputs.new_tag
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and push Docker image with version
        if: steps.versioning.outputs.new_tag
        run: |
          # Pobierz obraz tagged as latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/the-button:latest

          # Otaguj pod nowy semantyczny numer
          docker tag ${{ secrets.DOCKER_USERNAME }}/the-button:latest \
                     ${{ secrets.DOCKER_USERNAME }}/the-button:${{ steps.versioning.outputs.new_tag }}

          # Wypchnij nową wersję
          docker push ${{ secrets.DOCKER_USERNAME }}/the-button:${{ steps.versioning.outputs.new_tag }}

          # (Opcjonalnie) nadpisz latest ponownie
          docker push ${{ secrets.DOCKER_USERNAME }}/the-button:latest

          echo "Obraz Docker został otagowany wersją ${{ steps.versioning.outputs.new_tag }} i wypchnięty do Docker Hub"

  deploy-to-production:
    needs: release
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/deploy_key

      - name: Adding Known Hosts
        run: |
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Prepare deployment
        run: |
          chmod +x ./.github/scripts/deploy.sh

      - name: Deploy to EC2
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/the-button
          TAG: ${{ needs.release.outputs.tag }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          ENV_NAME: production
        run: |
          echo "Starting deployment of version $TAG to EC2..."
          ./.github/scripts/deploy.sh $IMAGE_NAME $TAG $EC2_HOST $EC2_USER $ENV_NAME
